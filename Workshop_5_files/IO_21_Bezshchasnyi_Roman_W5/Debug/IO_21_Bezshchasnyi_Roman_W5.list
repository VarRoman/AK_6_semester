
IO_21_Bezshchasnyi_Roman_W5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004254  08004254  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800425c  0800425c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800425c  0800425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004264  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a3f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9e  00000000  00000000  0000fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  00011720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073c  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe3e  00000000  00000000  000127c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d098  00000000  00000000  00032602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0fa1  00000000  00000000  0003f69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010063b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  00100680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00102ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800421c 	.word	0x0800421c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800421c 	.word	0x0800421c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CS43L22_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CS43L22_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
	// Enable chip
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	4863      	ldr	r0, [pc, #396]	@ (800068c <CS43L22_Init+0x198>)
 8000500:	f001 fe80 	bl	8002204 <HAL_GPIO_WritePin>
	//
	// Initialization
	//
	uint8_t TxBuffer[2];

	TxBuffer[0] = 0x0D;
 8000504:	230d      	movs	r3, #13
 8000506:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x01;
 8000508:	2301      	movs	r3, #1
 800050a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	230a      	movs	r3, #10
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	2194      	movs	r1, #148	@ 0x94
 8000516:	485e      	ldr	r0, [pc, #376]	@ (8000690 <CS43L22_Init+0x19c>)
 8000518:	f001 ffd2 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x99;
 8000520:	2399      	movs	r3, #153	@ 0x99
 8000522:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	230a      	movs	r3, #10
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2194      	movs	r1, #148	@ 0x94
 800052e:	4858      	ldr	r0, [pc, #352]	@ (8000690 <CS43L22_Init+0x19c>)
 8000530:	f001 ffc6 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x47;
 8000534:	2347      	movs	r3, #71	@ 0x47
 8000536:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x80;
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	230a      	movs	r3, #10
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2194      	movs	r1, #148	@ 0x94
 8000546:	4852      	ldr	r0, [pc, #328]	@ (8000690 <CS43L22_Init+0x19c>)
 8000548:	f001 ffba 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 800054c:	2332      	movs	r3, #50	@ 0x32
 800054e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xFF;
 8000550:	23ff      	movs	r3, #255	@ 0xff
 8000552:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2194      	movs	r1, #148	@ 0x94
 800055e:	484c      	ldr	r0, [pc, #304]	@ (8000690 <CS43L22_Init+0x19c>)
 8000560:	f001 ffae 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 8000564:	2332      	movs	r3, #50	@ 0x32
 8000566:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x7F;
 8000568:	237f      	movs	r3, #127	@ 0x7f
 800056a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2302      	movs	r3, #2
 8000574:	2194      	movs	r1, #148	@ 0x94
 8000576:	4846      	ldr	r0, [pc, #280]	@ (8000690 <CS43L22_Init+0x19c>)
 8000578:	f001 ffa2 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	2194      	movs	r1, #148	@ 0x94
 800058e:	4840      	ldr	r0, [pc, #256]	@ (8000690 <CS43L22_Init+0x19c>)
 8000590:	f001 ff96 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x04;
 8000594:	2304      	movs	r3, #4
 8000596:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xAF;
 8000598:	23af      	movs	r3, #175	@ 0xaf
 800059a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800059c:	1d3a      	adds	r2, r7, #4
 800059e:	230a      	movs	r3, #10
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	@ 0x94
 80005a6:	483a      	ldr	r0, [pc, #232]	@ (8000690 <CS43L22_Init+0x19c>)
 80005a8:	f001 ff8a 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0D;
 80005ac:	230d      	movs	r3, #13
 80005ae:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x70;
 80005b0:	2370      	movs	r3, #112	@ 0x70
 80005b2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	230a      	movs	r3, #10
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	2194      	movs	r1, #148	@ 0x94
 80005be:	4834      	ldr	r0, [pc, #208]	@ (8000690 <CS43L22_Init+0x19c>)
 80005c0:	f001 ff7e 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x05;
 80005c4:	2305      	movs	r3, #5
 80005c6:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x81;
 80005c8:	2381      	movs	r3, #129	@ 0x81
 80005ca:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2194      	movs	r1, #148	@ 0x94
 80005d6:	482e      	ldr	r0, [pc, #184]	@ (8000690 <CS43L22_Init+0x19c>)
 80005d8:	f001 ff72 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x06;
 80005dc:	2306      	movs	r3, #6
 80005de:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x07;
 80005e0:	2307      	movs	r3, #7
 80005e2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2194      	movs	r1, #148	@ 0x94
 80005ee:	4828      	ldr	r0, [pc, #160]	@ (8000690 <CS43L22_Init+0x19c>)
 80005f0:	f001 ff66 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0A;
 80005f4:	230a      	movs	r3, #10
 80005f6:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	230a      	movs	r3, #10
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2194      	movs	r1, #148	@ 0x94
 8000606:	4822      	ldr	r0, [pc, #136]	@ (8000690 <CS43L22_Init+0x19c>)
 8000608:	f001 ff5a 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x27;
 800060c:	2327      	movs	r3, #39	@ 0x27
 800060e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 8000610:	2300      	movs	r3, #0
 8000612:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2194      	movs	r1, #148	@ 0x94
 800061e:	481c      	ldr	r0, [pc, #112]	@ (8000690 <CS43L22_Init+0x19c>)
 8000620:	f001 ff4e 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1A;
 8000624:	231a      	movs	r3, #26
 8000626:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 8000628:	230a      	movs	r3, #10
 800062a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	230a      	movs	r3, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	2194      	movs	r1, #148	@ 0x94
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <CS43L22_Init+0x19c>)
 8000638:	f001 ff42 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1B;
 800063c:	231b      	movs	r3, #27
 800063e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 8000640:	230a      	movs	r3, #10
 8000642:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	230a      	movs	r3, #10
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2194      	movs	r1, #148	@ 0x94
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <CS43L22_Init+0x19c>)
 8000650:	f001 ff36 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1F;
 8000654:	231f      	movs	r3, #31
 8000656:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0F;
 8000658:	230f      	movs	r3, #15
 800065a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	230a      	movs	r3, #10
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2302      	movs	r3, #2
 8000664:	2194      	movs	r1, #148	@ 0x94
 8000666:	480a      	ldr	r0, [pc, #40]	@ (8000690 <CS43L22_Init+0x19c>)
 8000668:	f001 ff2a 	bl	80024c0 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x02;
 800066c:	2302      	movs	r3, #2
 800066e:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x9E;
 8000670:	239e      	movs	r3, #158	@ 0x9e
 8000672:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	230a      	movs	r3, #10
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2302      	movs	r3, #2
 800067c:	2194      	movs	r1, #148	@ 0x94
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <CS43L22_Init+0x19c>)
 8000680:	f001 ff1e 	bl	80024c0 <HAL_I2C_Master_Transmit>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00
 8000690:	20000028 	.word	0x20000028

08000694 <CS43L22_Beep>:

void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];

	// Set volume and off time
	TxBuffer[0] = 0x1D;		// Register address
 80006a0:	231d      	movs	r3, #29
 80006a2:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (volume and off time)
 80006a4:	2300      	movs	r3, #0
 80006a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006a8:	f107 020c 	add.w	r2, r7, #12
 80006ac:	230a      	movs	r3, #10
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2194      	movs	r1, #148	@ 0x94
 80006b4:	4844      	ldr	r0, [pc, #272]	@ (80007c8 <CS43L22_Beep+0x134>)
 80006b6:	f001 ff03 	bl	80024c0 <HAL_I2C_Master_Transmit>

	// Set sound frequency
	TxBuffer[0] = 0x1C;		// Register address
 80006ba:	231c      	movs	r3, #28
 80006bc:	733b      	strb	r3, [r7, #12]
	switch (pitch)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d853      	bhi.n	800076c <CS43L22_Beep+0xd8>
 80006c4:	a201      	add	r2, pc, #4	@ (adr r2, 80006cc <CS43L22_Beep+0x38>)
 80006c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ca:	bf00      	nop
 80006cc:	0800070d 	.word	0x0800070d
 80006d0:	08000713 	.word	0x08000713
 80006d4:	08000719 	.word	0x08000719
 80006d8:	0800071f 	.word	0x0800071f
 80006dc:	08000725 	.word	0x08000725
 80006e0:	0800072b 	.word	0x0800072b
 80006e4:	08000731 	.word	0x08000731
 80006e8:	08000737 	.word	0x08000737
 80006ec:	0800073d 	.word	0x0800073d
 80006f0:	08000743 	.word	0x08000743
 80006f4:	08000749 	.word	0x08000749
 80006f8:	0800074f 	.word	0x0800074f
 80006fc:	08000755 	.word	0x08000755
 8000700:	0800075b 	.word	0x0800075b
 8000704:	08000761 	.word	0x08000761
 8000708:	08000767 	.word	0x08000767
		{
			case C4:
				TxBuffer[1] = 0x00;		// 0000 - 260.87 Hz
 800070c:	2300      	movs	r3, #0
 800070e:	737b      	strb	r3, [r7, #13]
				break;
 8000710:	e02f      	b.n	8000772 <CS43L22_Beep+0xde>
			case C5:
				TxBuffer[1] = 0x10;		// 0001 - 521.74 Hz
 8000712:	2310      	movs	r3, #16
 8000714:	737b      	strb	r3, [r7, #13]
				break;
 8000716:	e02c      	b.n	8000772 <CS43L22_Beep+0xde>
			case D5:
				TxBuffer[1] = 0x20;		// 0010 - 585.37 Hz
 8000718:	2320      	movs	r3, #32
 800071a:	737b      	strb	r3, [r7, #13]
				break;
 800071c:	e029      	b.n	8000772 <CS43L22_Beep+0xde>
			case E5:
				TxBuffer[1] = 0x30;		// 0011 - 666.67 Hz
 800071e:	2330      	movs	r3, #48	@ 0x30
 8000720:	737b      	strb	r3, [r7, #13]
				break;
 8000722:	e026      	b.n	8000772 <CS43L22_Beep+0xde>
			case F5:
				TxBuffer[1] = 0x40;		// 0100 - 705.88 Hz
 8000724:	2340      	movs	r3, #64	@ 0x40
 8000726:	737b      	strb	r3, [r7, #13]
				break;
 8000728:	e023      	b.n	8000772 <CS43L22_Beep+0xde>
			case G5:
				TxBuffer[1] = 0x50;		// 0101 - 774.19 Hz
 800072a:	2350      	movs	r3, #80	@ 0x50
 800072c:	737b      	strb	r3, [r7, #13]
				break;
 800072e:	e020      	b.n	8000772 <CS43L22_Beep+0xde>
			case A5:
				TxBuffer[1] = 0x60;		// 0110 - 888.89 Hz
 8000730:	2360      	movs	r3, #96	@ 0x60
 8000732:	737b      	strb	r3, [r7, #13]
				break;
 8000734:	e01d      	b.n	8000772 <CS43L22_Beep+0xde>
			case B5:
				TxBuffer[1] = 0x70;		// 0111 - 1000.00 Hz
 8000736:	2370      	movs	r3, #112	@ 0x70
 8000738:	737b      	strb	r3, [r7, #13]
				break;
 800073a:	e01a      	b.n	8000772 <CS43L22_Beep+0xde>
			case C6:
				TxBuffer[1] = 0x80;		// 1000 - 1043.48 Hz
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	737b      	strb	r3, [r7, #13]
				break;
 8000740:	e017      	b.n	8000772 <CS43L22_Beep+0xde>
			case D6:
				TxBuffer[1] = 0x90;		// 1001 - 1200.00 Hz
 8000742:	2390      	movs	r3, #144	@ 0x90
 8000744:	737b      	strb	r3, [r7, #13]
				break;
 8000746:	e014      	b.n	8000772 <CS43L22_Beep+0xde>
			case E6:
				TxBuffer[1] = 0xA0;		// 1010 - 1333.33 Hz
 8000748:	23a0      	movs	r3, #160	@ 0xa0
 800074a:	737b      	strb	r3, [r7, #13]
				break;
 800074c:	e011      	b.n	8000772 <CS43L22_Beep+0xde>
			case F6:
				TxBuffer[1] = 0xB0;		// 1011 - 1411.76 Hz
 800074e:	23b0      	movs	r3, #176	@ 0xb0
 8000750:	737b      	strb	r3, [r7, #13]
				break;
 8000752:	e00e      	b.n	8000772 <CS43L22_Beep+0xde>
			case G6:
				TxBuffer[1] = 0xC0;		// 1100 - 1600.00 Hz
 8000754:	23c0      	movs	r3, #192	@ 0xc0
 8000756:	737b      	strb	r3, [r7, #13]
				break;
 8000758:	e00b      	b.n	8000772 <CS43L22_Beep+0xde>
			case A6:
				TxBuffer[1] = 0xD0;		// 1101 - 1714.29 Hz
 800075a:	23d0      	movs	r3, #208	@ 0xd0
 800075c:	737b      	strb	r3, [r7, #13]
				break;
 800075e:	e008      	b.n	8000772 <CS43L22_Beep+0xde>
			case B6:
				TxBuffer[1] = 0xE0;		// 1110 - 2000.00 Hz
 8000760:	23e0      	movs	r3, #224	@ 0xe0
 8000762:	737b      	strb	r3, [r7, #13]
				break;
 8000764:	e005      	b.n	8000772 <CS43L22_Beep+0xde>
			case C7:
				TxBuffer[1] = 0xF0;		// 1111 - 2181.82 Hz
 8000766:	23f0      	movs	r3, #240	@ 0xf0
 8000768:	737b      	strb	r3, [r7, #13]
				break;
 800076a:	e002      	b.n	8000772 <CS43L22_Beep+0xde>

			// Assume C4 for all other cases
			case MAX_VALUE:
			default:
				TxBuffer[1] = 0x00;		// Default to C4
 800076c:	2300      	movs	r3, #0
 800076e:	737b      	strb	r3, [r7, #13]
				break;
 8000770:	bf00      	nop
		}
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000772:	f107 020c 	add.w	r2, r7, #12
 8000776:	230a      	movs	r3, #10
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	2194      	movs	r1, #148	@ 0x94
 800077e:	4812      	ldr	r0, [pc, #72]	@ (80007c8 <CS43L22_Beep+0x134>)
 8000780:	f001 fe9e 	bl	80024c0 <HAL_I2C_Master_Transmit>

	// Enable continuous mode (SOUND STARTED)
	TxBuffer[0] = 0x1E;		// Register address
 8000784:	231e      	movs	r3, #30
 8000786:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0xC0;		// Value (beep and tone configuration)
 8000788:	23c0      	movs	r3, #192	@ 0xc0
 800078a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800078c:	f107 020c 	add.w	r2, r7, #12
 8000790:	230a      	movs	r3, #10
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2302      	movs	r3, #2
 8000796:	2194      	movs	r1, #148	@ 0x94
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <CS43L22_Beep+0x134>)
 800079a:	f001 fe91 	bl	80024c0 <HAL_I2C_Master_Transmit>

	// Playing...
	HAL_Delay(duration_ms);
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	f000 feee 	bl	8001580 <HAL_Delay>

	// Disable continuous mode (SOUND STOPED)
	TxBuffer[0] = 0x1E;		// Register address
 80007a4:	231e      	movs	r3, #30
 80007a6:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (beep and tone configuration)
 80007a8:	2300      	movs	r3, #0
 80007aa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80007ac:	f107 020c 	add.w	r2, r7, #12
 80007b0:	230a      	movs	r3, #10
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <CS43L22_Beep+0x134>)
 80007ba:	f001 fe81 	bl	80024c0 <HAL_I2C_Master_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fe63 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 fb6f 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f000 fc57 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 80007de:	f000 fc35 	bl	800104c <MX_DMA_Init>
  MX_I2C1_Init();
 80007e2:	f000 fbd7 	bl	8000f94 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007e6:	f000 fc03 	bl	8000ff0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  // Init DAC
 	 CS43L22_Init();
 80007ea:	f7ff fe83 	bl	80004f4 <CS43L22_Init>
 	 // Transmit empty data
 	 HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 80007ee:	2264      	movs	r2, #100	@ 0x64
 80007f0:	4903      	ldr	r1, [pc, #12]	@ (8000800 <main+0x34>)
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <main+0x38>)
 80007f4:	f002 fafe 	bl	8002df4 <HAL_I2S_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int i;
	  for (i = 0; i < 3; i++)  // Програти мелодію 3 рази
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	e353      	b.n	8000ea6 <main+0x6da>
 80007fe:	bf00      	nop
 8000800:	20000124 	.word	0x20000124
 8000804:	2000007c 	.word	0x2000007c
        // C5, C5, G5, G5, A5, A5, G5 (pause)
        // F5, F5, E5, E5, D5, D5, C5 (long pause)

        // Line 1: C C G G A A G
        // C5 (До)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // LED для C5
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080e:	48e6      	ldr	r0, [pc, #920]	@ (8000ba8 <main+0x3dc>)
 8000810:	f001 fcf8 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 400);
 8000814:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ff3b 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000824:	48e0      	ldr	r0, [pc, #896]	@ (8000ba8 <main+0x3dc>)
 8000826:	f001 fced 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800082a:	2032      	movs	r0, #50	@ 0x32
 800082c:	f000 fea8 	bl	8001580 <HAL_Delay>

        // C5 (До)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000836:	48dc      	ldr	r0, [pc, #880]	@ (8000ba8 <main+0x3dc>)
 8000838:	f001 fce4 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 400);
 800083c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff27 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084c:	48d6      	ldr	r0, [pc, #856]	@ (8000ba8 <main+0x3dc>)
 800084e:	f001 fcd9 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000852:	2032      	movs	r0, #50	@ 0x32
 8000854:	f000 fe94 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED для G5
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085e:	48d2      	ldr	r0, [pc, #840]	@ (8000ba8 <main+0x3dc>)
 8000860:	f001 fcd0 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000864:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000868:	2005      	movs	r0, #5
 800086a:	f7ff ff13 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000874:	48cc      	ldr	r0, [pc, #816]	@ (8000ba8 <main+0x3dc>)
 8000876:	f001 fcc5 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800087a:	2032      	movs	r0, #50	@ 0x32
 800087c:	f000 fe80 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000886:	48c8      	ldr	r0, [pc, #800]	@ (8000ba8 <main+0x3dc>)
 8000888:	f001 fcbc 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 800088c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000890:	2005      	movs	r0, #5
 8000892:	f7ff feff 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	48c2      	ldr	r0, [pc, #776]	@ (8000ba8 <main+0x3dc>)
 800089e:	f001 fcb1 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80008a2:	2032      	movs	r0, #50	@ 0x32
 80008a4:	f000 fe6c 	bl	8001580 <HAL_Delay>

        // A5 (Ля)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED для A5 (використовуємо один пін)
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ae:	48be      	ldr	r0, [pc, #760]	@ (8000ba8 <main+0x3dc>)
 80008b0:	f001 fca8 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(A5, 400);
 80008b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80008b8:	2006      	movs	r0, #6
 80008ba:	f7ff feeb 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c4:	48b8      	ldr	r0, [pc, #736]	@ (8000ba8 <main+0x3dc>)
 80008c6:	f001 fc9d 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80008ca:	2032      	movs	r0, #50	@ 0x32
 80008cc:	f000 fe58 	bl	8001580 <HAL_Delay>

        // A5 (Ля)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d6:	48b4      	ldr	r0, [pc, #720]	@ (8000ba8 <main+0x3dc>)
 80008d8:	f001 fc94 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(A5, 400);
 80008dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80008e0:	2006      	movs	r0, #6
 80008e2:	f7ff fed7 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ec:	48ae      	ldr	r0, [pc, #696]	@ (8000ba8 <main+0x3dc>)
 80008ee:	f001 fc89 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80008f2:	2032      	movs	r0, #50	@ 0x32
 80008f4:	f000 fe44 	bl	8001580 <HAL_Delay>

        // G5 (Соль) - довша нота в кінці фрази
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008fe:	48aa      	ldr	r0, [pc, #680]	@ (8000ba8 <main+0x3dc>)
 8000900:	f001 fc80 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 600);
 8000904:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000908:	2005      	movs	r0, #5
 800090a:	f7ff fec3 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	48a4      	ldr	r0, [pc, #656]	@ (8000ba8 <main+0x3dc>)
 8000916:	f001 fc75 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(150); // Довша пауза
 800091a:	2096      	movs	r0, #150	@ 0x96
 800091c:	f000 fe30 	bl	8001580 <HAL_Delay>

        // Line 2: F F E E D D C
        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // LED для F5 (новий пін для різноманітності)
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	48a0      	ldr	r0, [pc, #640]	@ (8000ba8 <main+0x3dc>)
 8000928:	f001 fc6c 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 800092c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000930:	2004      	movs	r0, #4
 8000932:	f7ff feaf 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093c:	489a      	ldr	r0, [pc, #616]	@ (8000ba8 <main+0x3dc>)
 800093e:	f001 fc61 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000942:	2032      	movs	r0, #50	@ 0x32
 8000944:	f000 fe1c 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800094e:	4896      	ldr	r0, [pc, #600]	@ (8000ba8 <main+0x3dc>)
 8000950:	f001 fc58 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000954:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000958:	2004      	movs	r0, #4
 800095a:	f7ff fe9b 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000964:	4890      	ldr	r0, [pc, #576]	@ (8000ba8 <main+0x3dc>)
 8000966:	f001 fc4d 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800096a:	2032      	movs	r0, #50	@ 0x32
 800096c:	f000 fe08 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED для E5
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000976:	488c      	ldr	r0, [pc, #560]	@ (8000ba8 <main+0x3dc>)
 8000978:	f001 fc44 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 800097c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000980:	2003      	movs	r0, #3
 8000982:	f7ff fe87 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800098c:	4886      	ldr	r0, [pc, #536]	@ (8000ba8 <main+0x3dc>)
 800098e:	f001 fc39 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000992:	2032      	movs	r0, #50	@ 0x32
 8000994:	f000 fdf4 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099e:	4882      	ldr	r0, [pc, #520]	@ (8000ba8 <main+0x3dc>)
 80009a0:	f001 fc30 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 80009a4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fe73 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b4:	487c      	ldr	r0, [pc, #496]	@ (8000ba8 <main+0x3dc>)
 80009b6:	f001 fc25 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80009ba:	2032      	movs	r0, #50	@ 0x32
 80009bc:	f000 fde0 	bl	8001580 <HAL_Delay>

        // D5 (Ре)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED для D5
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	4878      	ldr	r0, [pc, #480]	@ (8000ba8 <main+0x3dc>)
 80009c8:	f001 fc1c 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 400);
 80009cc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fe5f 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009dc:	4872      	ldr	r0, [pc, #456]	@ (8000ba8 <main+0x3dc>)
 80009de:	f001 fc11 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80009e2:	2032      	movs	r0, #50	@ 0x32
 80009e4:	f000 fdcc 	bl	8001580 <HAL_Delay>

        // D5 (Ре)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	486e      	ldr	r0, [pc, #440]	@ (8000ba8 <main+0x3dc>)
 80009f0:	f001 fc08 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 400);
 80009f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fe4b 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4868      	ldr	r0, [pc, #416]	@ (8000ba8 <main+0x3dc>)
 8000a06:	f001 fbfd 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000a0a:	2032      	movs	r0, #50	@ 0x32
 8000a0c:	f000 fdb8 	bl	8001580 <HAL_Delay>

        // C5 (До) - довша нота в кінці фрази
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a16:	4864      	ldr	r0, [pc, #400]	@ (8000ba8 <main+0x3dc>)
 8000a18:	f001 fbf4 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 600);
 8000a1c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fe37 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a2c:	485e      	ldr	r0, [pc, #376]	@ (8000ba8 <main+0x3dc>)
 8000a2e:	f001 fbe9 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(150); // Довша пауза
 8000a32:	2096      	movs	r0, #150	@ 0x96
 8000a34:	f000 fda4 	bl	8001580 <HAL_Delay>

        // Line 3: G G F F E E D (Повтор з "Up above the world so high")
        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3e:	485a      	ldr	r0, [pc, #360]	@ (8000ba8 <main+0x3dc>)
 8000a40:	f001 fbe0 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000a44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f7ff fe23 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a54:	4854      	ldr	r0, [pc, #336]	@ (8000ba8 <main+0x3dc>)
 8000a56:	f001 fbd5 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000a5a:	2032      	movs	r0, #50	@ 0x32
 8000a5c:	f000 fd90 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4850      	ldr	r0, [pc, #320]	@ (8000ba8 <main+0x3dc>)
 8000a68:	f001 fbcc 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000a6c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000a70:	2005      	movs	r0, #5
 8000a72:	f7ff fe0f 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7c:	484a      	ldr	r0, [pc, #296]	@ (8000ba8 <main+0x3dc>)
 8000a7e:	f001 fbc1 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000a82:	2032      	movs	r0, #50	@ 0x32
 8000a84:	f000 fd7c 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8e:	4846      	ldr	r0, [pc, #280]	@ (8000ba8 <main+0x3dc>)
 8000a90:	f001 fbb8 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000a94:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f7ff fdfb 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa4:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <main+0x3dc>)
 8000aa6:	f001 fbad 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000aaa:	2032      	movs	r0, #50	@ 0x32
 8000aac:	f000 fd68 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab6:	483c      	ldr	r0, [pc, #240]	@ (8000ba8 <main+0x3dc>)
 8000ab8:	f001 fba4 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000abc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000ac0:	2004      	movs	r0, #4
 8000ac2:	f7ff fde7 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000acc:	4836      	ldr	r0, [pc, #216]	@ (8000ba8 <main+0x3dc>)
 8000ace:	f001 fb99 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000ad2:	2032      	movs	r0, #50	@ 0x32
 8000ad4:	f000 fd54 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ade:	4832      	ldr	r0, [pc, #200]	@ (8000ba8 <main+0x3dc>)
 8000ae0:	f001 fb90 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000ae4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f7ff fdd3 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af4:	482c      	ldr	r0, [pc, #176]	@ (8000ba8 <main+0x3dc>)
 8000af6:	f001 fb85 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000afa:	2032      	movs	r0, #50	@ 0x32
 8000afc:	f000 fd40 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b06:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <main+0x3dc>)
 8000b08:	f001 fb7c 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000b0c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b10:	2003      	movs	r0, #3
 8000b12:	f7ff fdbf 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1c:	4822      	ldr	r0, [pc, #136]	@ (8000ba8 <main+0x3dc>)
 8000b1e:	f001 fb71 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000b22:	2032      	movs	r0, #50	@ 0x32
 8000b24:	f000 fd2c 	bl	8001580 <HAL_Delay>

        // D5 (Ре) - довша нота в кінці фрази
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2e:	481e      	ldr	r0, [pc, #120]	@ (8000ba8 <main+0x3dc>)
 8000b30:	f001 fb68 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 600);
 8000b34:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fdab 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b44:	4818      	ldr	r0, [pc, #96]	@ (8000ba8 <main+0x3dc>)
 8000b46:	f001 fb5d 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(150); // Довша пауза
 8000b4a:	2096      	movs	r0, #150	@ 0x96
 8000b4c:	f000 fd18 	bl	8001580 <HAL_Delay>

        // Line 4: G G F F E E D (Повтор з "Like a diamond in the sky")
        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b56:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <main+0x3dc>)
 8000b58:	f001 fb54 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000b5c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b60:	2005      	movs	r0, #5
 8000b62:	f7ff fd97 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6c:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <main+0x3dc>)
 8000b6e:	f001 fb49 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000b72:	2032      	movs	r0, #50	@ 0x32
 8000b74:	f000 fd04 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7e:	480a      	ldr	r0, [pc, #40]	@ (8000ba8 <main+0x3dc>)
 8000b80:	f001 fb40 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000b84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b88:	2005      	movs	r0, #5
 8000b8a:	f7ff fd83 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <main+0x3dc>)
 8000b96:	f001 fb35 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000b9a:	2032      	movs	r0, #50	@ 0x32
 8000b9c:	f000 fcf0 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba6:	e001      	b.n	8000bac <main+0x3e0>
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	48c1      	ldr	r0, [pc, #772]	@ (8000eb4 <main+0x6e8>)
 8000bae:	f001 fb29 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000bb2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000bb6:	2004      	movs	r0, #4
 8000bb8:	f7ff fd6c 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc2:	48bc      	ldr	r0, [pc, #752]	@ (8000eb4 <main+0x6e8>)
 8000bc4:	f001 fb1e 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000bc8:	2032      	movs	r0, #50	@ 0x32
 8000bca:	f000 fcd9 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd4:	48b7      	ldr	r0, [pc, #732]	@ (8000eb4 <main+0x6e8>)
 8000bd6:	f001 fb15 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000bda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000bde:	2004      	movs	r0, #4
 8000be0:	f7ff fd58 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bea:	48b2      	ldr	r0, [pc, #712]	@ (8000eb4 <main+0x6e8>)
 8000bec:	f001 fb0a 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	@ 0x32
 8000bf2:	f000 fcc5 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfc:	48ad      	ldr	r0, [pc, #692]	@ (8000eb4 <main+0x6e8>)
 8000bfe:	f001 fb01 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000c02:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fd44 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c12:	48a8      	ldr	r0, [pc, #672]	@ (8000eb4 <main+0x6e8>)
 8000c14:	f001 faf6 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000c18:	2032      	movs	r0, #50	@ 0x32
 8000c1a:	f000 fcb1 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c24:	48a3      	ldr	r0, [pc, #652]	@ (8000eb4 <main+0x6e8>)
 8000c26:	f001 faed 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000c2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f7ff fd30 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	489e      	ldr	r0, [pc, #632]	@ (8000eb4 <main+0x6e8>)
 8000c3c:	f001 fae2 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000c40:	2032      	movs	r0, #50	@ 0x32
 8000c42:	f000 fc9d 	bl	8001580 <HAL_Delay>

        // D5 (Ре) - довша нота в кінці фрази
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4c:	4899      	ldr	r0, [pc, #612]	@ (8000eb4 <main+0x6e8>)
 8000c4e:	f001 fad9 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 600);
 8000c52:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff fd1c 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c62:	4894      	ldr	r0, [pc, #592]	@ (8000eb4 <main+0x6e8>)
 8000c64:	f001 face 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(150); // Довша пауза
 8000c68:	2096      	movs	r0, #150	@ 0x96
 8000c6a:	f000 fc89 	bl	8001580 <HAL_Delay>

        // Line 5: C C G G A A G (Повтор 1-го рядка)
        // C5 (До)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c74:	488f      	ldr	r0, [pc, #572]	@ (8000eb4 <main+0x6e8>)
 8000c76:	f001 fac5 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 400);
 8000c7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fd08 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c8a:	488a      	ldr	r0, [pc, #552]	@ (8000eb4 <main+0x6e8>)
 8000c8c:	f001 faba 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000c90:	2032      	movs	r0, #50	@ 0x32
 8000c92:	f000 fc75 	bl	8001580 <HAL_Delay>

        // C5 (До)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c9c:	4885      	ldr	r0, [pc, #532]	@ (8000eb4 <main+0x6e8>)
 8000c9e:	f001 fab1 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 400);
 8000ca2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fcf4 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cb2:	4880      	ldr	r0, [pc, #512]	@ (8000eb4 <main+0x6e8>)
 8000cb4:	f001 faa6 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000cb8:	2032      	movs	r0, #50	@ 0x32
 8000cba:	f000 fc61 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc4:	487b      	ldr	r0, [pc, #492]	@ (8000eb4 <main+0x6e8>)
 8000cc6:	f001 fa9d 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000cca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000cce:	2005      	movs	r0, #5
 8000cd0:	f7ff fce0 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cda:	4876      	ldr	r0, [pc, #472]	@ (8000eb4 <main+0x6e8>)
 8000cdc:	f001 fa92 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000ce0:	2032      	movs	r0, #50	@ 0x32
 8000ce2:	f000 fc4d 	bl	8001580 <HAL_Delay>

        // G5 (Соль)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cec:	4871      	ldr	r0, [pc, #452]	@ (8000eb4 <main+0x6e8>)
 8000cee:	f001 fa89 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 400);
 8000cf2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f7ff fccc 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d02:	486c      	ldr	r0, [pc, #432]	@ (8000eb4 <main+0x6e8>)
 8000d04:	f001 fa7e 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000d08:	2032      	movs	r0, #50	@ 0x32
 8000d0a:	f000 fc39 	bl	8001580 <HAL_Delay>

        // A5 (Ля)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d14:	4867      	ldr	r0, [pc, #412]	@ (8000eb4 <main+0x6e8>)
 8000d16:	f001 fa75 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(A5, 400);
 8000d1a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff fcb8 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d2a:	4862      	ldr	r0, [pc, #392]	@ (8000eb4 <main+0x6e8>)
 8000d2c:	f001 fa6a 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000d30:	2032      	movs	r0, #50	@ 0x32
 8000d32:	f000 fc25 	bl	8001580 <HAL_Delay>

        // A5 (Ля)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d3c:	485d      	ldr	r0, [pc, #372]	@ (8000eb4 <main+0x6e8>)
 8000d3e:	f001 fa61 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(A5, 400);
 8000d42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000d46:	2006      	movs	r0, #6
 8000d48:	f7ff fca4 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d52:	4858      	ldr	r0, [pc, #352]	@ (8000eb4 <main+0x6e8>)
 8000d54:	f001 fa56 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000d58:	2032      	movs	r0, #50	@ 0x32
 8000d5a:	f000 fc11 	bl	8001580 <HAL_Delay>

        // G5 (Соль) - довша нота в кінці фрази
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d64:	4853      	ldr	r0, [pc, #332]	@ (8000eb4 <main+0x6e8>)
 8000d66:	f001 fa4d 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(G5, 600);
 8000d6a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f7ff fc90 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7a:	484e      	ldr	r0, [pc, #312]	@ (8000eb4 <main+0x6e8>)
 8000d7c:	f001 fa42 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(150); // Довша пауза
 8000d80:	2096      	movs	r0, #150	@ 0x96
 8000d82:	f000 fbfd 	bl	8001580 <HAL_Delay>

        // Line 6: F F E E D D C (Повтор 2-го рядка)
        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8c:	4849      	ldr	r0, [pc, #292]	@ (8000eb4 <main+0x6e8>)
 8000d8e:	f001 fa39 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000d92:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000d96:	2004      	movs	r0, #4
 8000d98:	f7ff fc7c 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da2:	4844      	ldr	r0, [pc, #272]	@ (8000eb4 <main+0x6e8>)
 8000da4:	f001 fa2e 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000da8:	2032      	movs	r0, #50	@ 0x32
 8000daa:	f000 fbe9 	bl	8001580 <HAL_Delay>

        // F5 (Фа)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db4:	483f      	ldr	r0, [pc, #252]	@ (8000eb4 <main+0x6e8>)
 8000db6:	f001 fa25 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(F5, 400);
 8000dba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000dbe:	2004      	movs	r0, #4
 8000dc0:	f7ff fc68 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dca:	483a      	ldr	r0, [pc, #232]	@ (8000eb4 <main+0x6e8>)
 8000dcc:	f001 fa1a 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000dd0:	2032      	movs	r0, #50	@ 0x32
 8000dd2:	f000 fbd5 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ddc:	4835      	ldr	r0, [pc, #212]	@ (8000eb4 <main+0x6e8>)
 8000dde:	f001 fa11 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000de2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000de6:	2003      	movs	r0, #3
 8000de8:	f7ff fc54 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df2:	4830      	ldr	r0, [pc, #192]	@ (8000eb4 <main+0x6e8>)
 8000df4:	f001 fa06 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000df8:	2032      	movs	r0, #50	@ 0x32
 8000dfa:	f000 fbc1 	bl	8001580 <HAL_Delay>

        // E5 (Мі)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e04:	482b      	ldr	r0, [pc, #172]	@ (8000eb4 <main+0x6e8>)
 8000e06:	f001 f9fd 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(E5, 400);
 8000e0a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff fc40 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	4826      	ldr	r0, [pc, #152]	@ (8000eb4 <main+0x6e8>)
 8000e1c:	f001 f9f2 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000e20:	2032      	movs	r0, #50	@ 0x32
 8000e22:	f000 fbad 	bl	8001580 <HAL_Delay>

        // D5 (Ре)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e2c:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <main+0x6e8>)
 8000e2e:	f001 f9e9 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 400);
 8000e32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fc2c 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e42:	481c      	ldr	r0, [pc, #112]	@ (8000eb4 <main+0x6e8>)
 8000e44:	f001 f9de 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000e48:	2032      	movs	r0, #50	@ 0x32
 8000e4a:	f000 fb99 	bl	8001580 <HAL_Delay>

        // D5 (Ре)
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e54:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <main+0x6e8>)
 8000e56:	f001 f9d5 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(D5, 400);
 8000e5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff fc18 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6a:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <main+0x6e8>)
 8000e6c:	f001 f9ca 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000e70:	2032      	movs	r0, #50	@ 0x32
 8000e72:	f000 fb85 	bl	8001580 <HAL_Delay>

        // C5 (До) - остання нота мелодії, довша тривалість і пауза
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e7c:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <main+0x6e8>)
 8000e7e:	f001 f9c1 	bl	8002204 <HAL_GPIO_WritePin>
        CS43L22_Beep(C5, 600);
 8000e82:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fc04 	bl	8000694 <CS43L22_Beep>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e92:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <main+0x6e8>)
 8000e94:	f001 f9b6 	bl	8002204 <HAL_GPIO_WritePin>
        HAL_Delay(300); // Довша пауза перед повтором або кінцем
 8000e98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e9c:	f000 fb70 	bl	8001580 <HAL_Delay>
	  for (i = 0; i < 3; i++)  // Програти мелодію 3 рази
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	f77f acad 	ble.w	8000808 <main+0x3c>
	  }
	    // Please keep it here.  Ok,sorry
	    while(1 ){}
 8000eae:	bf00      	nop
 8000eb0:	e7fd      	b.n	8000eae <main+0x6e2>
 8000eb2:	bf00      	nop
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 f97c 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ee4:	4a29      	ldr	r2, [pc, #164]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000eec:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a26      	ldr	r2, [pc, #152]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000ef2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ef6:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <SystemClock_Config+0xd8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <SystemClock_Config+0xd8>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <SystemClock_Config+0xd8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fbb5 	bl	80036b8 <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f54:	f000 f8fa 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fe18 	bl	8003ba8 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f7e:	f000 f8e5 	bl	800114c <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3750      	adds	r7, #80	@ 0x50
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40007000 	.word	0x40007000

08000f94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000f9a:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <MX_I2C1_Init+0x54>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x58>)
 8000fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_I2C1_Init+0x50>)
 8000fd2:	f001 f931 	bl	8002238 <HAL_I2C_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fdc:	f000 f8b6 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000028 	.word	0x20000028
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	000186a0 	.word	0x000186a0

08000ff0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_I2S3_Init+0x54>)
 8000ff6:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <MX_I2S3_Init+0x58>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_I2S3_Init+0x54>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_I2S3_Init+0x54>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001018:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800101c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_I2S3_Init+0x54>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_I2S3_Init+0x54>)
 8001032:	f001 fd9f 	bl	8002b74 <HAL_I2S_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800103c:	f000 f886 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000007c 	.word	0x2000007c
 8001048:	40003c00 	.word	0x40003c00

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <MX_DMA_Init+0x3c>)
 800105c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2010      	movs	r0, #16
 8001074:	f000 fb83 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001078:	2010      	movs	r0, #16
 800107a:	f000 fb9c 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <MX_GPIO_Init+0xb8>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_GPIO_Init+0xb8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001112:	2200      	movs	r2, #0
 8001114:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001118:	480b      	ldr	r0, [pc, #44]	@ (8001148 <MX_GPIO_Init+0xbc>)
 800111a:	f001 f873 	bl	8002204 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800111e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001122:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_GPIO_Init+0xbc>)
 8001138:	f000 fec8 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020c00 	.word	0x40020c00

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <HAL_I2C_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12c      	bne.n	8001224 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <HAL_I2C_MspInit+0x8c>)
 8001204:	f000 fe62 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 8001212:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_I2C_MspInit+0x88>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40005400 	.word	0x40005400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	@ 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <HAL_I2S_MspInit+0x160>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8093 	bne.w	8001390 <HAL_I2S_MspInit+0x158>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800126e:	23c0      	movs	r3, #192	@ 0xc0
 8001270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fe60 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001286:	f7ff ff61 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <HAL_I2S_MspInit+0x164>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a42      	ldr	r2, [pc, #264]	@ (800139c <HAL_I2S_MspInit+0x164>)
 8001294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_I2S_MspInit+0x164>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a3b      	ldr	r2, [pc, #236]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b35      	ldr	r3, [pc, #212]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a34      	ldr	r2, [pc, #208]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b32      	ldr	r3, [pc, #200]	@ (800139c <HAL_I2S_MspInit+0x164>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012de:	2310      	movs	r3, #16
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ee:	2306      	movs	r3, #6
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4829      	ldr	r0, [pc, #164]	@ (80013a0 <HAL_I2S_MspInit+0x168>)
 80012fa:	f000 fde7 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80012fe:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001310:	2306      	movs	r3, #6
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4822      	ldr	r0, [pc, #136]	@ (80013a4 <HAL_I2S_MspInit+0x16c>)
 800131c:	f000 fdd6 	bl	8001ecc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <HAL_I2S_MspInit+0x174>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800132e:	2240      	movs	r2, #64	@ 0x40
 8001330:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800133a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001346:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001354:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800135e:	2204      	movs	r2, #4
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001364:	2203      	movs	r2, #3
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001376:	f000 fa39 	bl	80017ec <HAL_DMA_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_I2S_MspInit+0x14c>
    {
      Error_Handler();
 8001380:	f7ff fee4 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38
 800138a:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_I2S_MspInit+0x170>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	@ 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40003c00 	.word	0x40003c00
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020800 	.word	0x40020800
 80013a8:	200000c4 	.word	0x200000c4
 80013ac:	40026088 	.word	0x40026088

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f89b 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <DMA1_Stream5_IRQHandler+0x10>)
 8001416:	f000 faef 	bl	80019f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000c4 	.word	0x200000c4

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f002 fead 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147a:	f7ff f9a7 	bl	80007cc <main>
  bx  lr    
 800147e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800148c:	08004264 	.word	0x08004264
  ldr r2, =_sbss
 8001490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001494:	200001f0 	.word	0x200001f0

08001498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <HAL_Init+0x40>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <HAL_Init+0x40>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <HAL_Init+0x40>)
 80014be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f94f 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	200f      	movs	r0, #15
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fe42 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f967 	bl	80017d2 <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 f92f 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	@ (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000008 	.word	0x20000008
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	200001ec 	.word	0x200001ec

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001ec 	.word	0x200001ec

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff3e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff31 	bl	800162c <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff feb6 	bl	8001568 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e099      	b.n	800193c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001828:	e00f      	b.n	800184a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182a:	f7ff fe9d 	bl	8001568 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	d908      	bls.n	800184a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e078      	b.n	800193c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e8      	bne.n	800182a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <HAL_DMA_Init+0x158>)
 8001864:	4013      	ands	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	4313      	orrs	r3, r2
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f023 0307 	bic.w	r3, r3, #7
 80018ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d117      	bne.n	800190e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fa6f 	bl	8001dd4 <DMA_CheckFifoParam>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2240      	movs	r2, #64	@ 0x40
 8001900:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800190a:	2301      	movs	r3, #1
 800190c:	e016      	b.n	800193c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa26 	bl	8001d68 <DMA_CalcBaseAndBitshift>
 800191c:	4603      	mov	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	223f      	movs	r2, #63	@ 0x3f
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	f010803f 	.word	0xf010803f

08001948 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_DMA_Start_IT+0x26>
 800196a:	2302      	movs	r3, #2
 800196c:	e040      	b.n	80019f0 <HAL_DMA_Start_IT+0xa8>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d12f      	bne.n	80019e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f9b8 	bl	8001d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a0:	223f      	movs	r2, #63	@ 0x3f
 80019a2:	409a      	lsls	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0216 	orr.w	r2, r2, #22
 80019b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e005      	b.n	80019ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a04:	4b8e      	ldr	r3, [pc, #568]	@ (8001c40 <HAL_DMA_IRQHandler+0x248>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a8e      	ldr	r2, [pc, #568]	@ (8001c44 <HAL_DMA_IRQHandler+0x24c>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	2208      	movs	r2, #8
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01a      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	2208      	movs	r2, #8
 8001a52:	409a      	lsls	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d012      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	2201      	movs	r2, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	2204      	movs	r2, #4
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d043      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03c      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2210      	movs	r2, #16
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d108      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d024      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
 8001b26:	e01f      	b.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e016      	b.n	8001b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 808f 	beq.w	8001c98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8087 	beq.w	8001c98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2220      	movs	r2, #32
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d136      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0216 	bic.w	r2, r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <HAL_DMA_IRQHandler+0x1da>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0208 	bic.w	r2, r2, #8
 8001be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	223f      	movs	r2, #63	@ 0x3f
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d07e      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
        }
        return;
 8001c0e:	e079      	b.n	8001d04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d031      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
 8001c3c:	e02c      	b.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000
 8001c44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e01e      	b.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0210 	bic.w	r2, r2, #16
 8001c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2205      	movs	r2, #5
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d307      	bcc.n	8001ce0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f2      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x2cc>
 8001cde:	e000      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d04:	bf00      	nop
    }
  }
}
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b40      	cmp	r3, #64	@ 0x40
 8001d38:	d108      	bne.n	8001d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4a:	e007      	b.n	8001d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b10      	subs	r3, #16
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <DMA_CalcBaseAndBitshift+0x64>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d909      	bls.n	8001daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	1d1a      	adds	r2, r3, #4
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001da8:	e007      	b.n	8001dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001db2:	f023 0303 	bic.w	r3, r3, #3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	aaaaaaab 	.word	0xaaaaaaab
 8001dd0:	0800424c 	.word	0x0800424c

08001dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11f      	bne.n	8001e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d856      	bhi.n	8001ea2 <DMA_CheckFifoParam+0xce>
 8001df4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <DMA_CheckFifoParam+0x28>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e1f 	.word	0x08001e1f
 8001e04:	08001e0d 	.word	0x08001e0d
 8001e08:	08001ea3 	.word	0x08001ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d046      	beq.n	8001ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1c:	e043      	b.n	8001ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e26:	d140      	bne.n	8001eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2c:	e03d      	b.n	8001eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e36:	d121      	bne.n	8001e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d837      	bhi.n	8001eae <DMA_CheckFifoParam+0xda>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <DMA_CheckFifoParam+0x70>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e5b 	.word	0x08001e5b
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	08001e6d 	.word	0x08001e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	e030      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d025      	beq.n	8001eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6a:	e022      	b.n	8001eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e74:	d11f      	bne.n	8001eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7a:	e01c      	b.n	8001eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d903      	bls.n	8001e8a <DMA_CheckFifoParam+0xb6>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d003      	beq.n	8001e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e88:	e018      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8e:	e015      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e00b      	b.n	8001eba <DMA_CheckFifoParam+0xe6>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e00a      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e008      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e006      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e004      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e002      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
    }
  } 
  
  return status; 
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a5f      	ldr	r2, [pc, #380]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5b      	ldr	r2, [pc, #364]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_GPIO_Init+0x314>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	@ (80021e4 <HAL_GPIO_Init+0x318>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	@ (80021e8 <HAL_GPIO_Init+0x31c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x320>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x32c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_GPIO_Init+0x330>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40021c00 	.word	0x40021c00
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e12b      	b.n	80024a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe ffa2 	bl	80011a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800228a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800229a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800229c:	f001 fe3c 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 80022a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a81      	ldr	r2, [pc, #516]	@ (80024ac <HAL_I2C_Init+0x274>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d807      	bhi.n	80022bc <HAL_I2C_Init+0x84>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a80      	ldr	r2, [pc, #512]	@ (80024b0 <HAL_I2C_Init+0x278>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	bf94      	ite	ls
 80022b4:	2301      	movls	r3, #1
 80022b6:	2300      	movhi	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e006      	b.n	80022ca <HAL_I2C_Init+0x92>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a7d      	ldr	r2, [pc, #500]	@ (80024b4 <HAL_I2C_Init+0x27c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0e7      	b.n	80024a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a78      	ldr	r2, [pc, #480]	@ (80024b8 <HAL_I2C_Init+0x280>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a6a      	ldr	r2, [pc, #424]	@ (80024ac <HAL_I2C_Init+0x274>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d802      	bhi.n	800230c <HAL_I2C_Init+0xd4>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3301      	adds	r3, #1
 800230a:	e009      	b.n	8002320 <HAL_I2C_Init+0xe8>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4a69      	ldr	r2, [pc, #420]	@ (80024bc <HAL_I2C_Init+0x284>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	3301      	adds	r3, #1
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002332:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	495c      	ldr	r1, [pc, #368]	@ (80024ac <HAL_I2C_Init+0x274>)
 800233c:	428b      	cmp	r3, r1
 800233e:	d819      	bhi.n	8002374 <HAL_I2C_Init+0x13c>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e59      	subs	r1, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fbb1 f3f3 	udiv	r3, r1, r3
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002354:	400b      	ands	r3, r1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_I2C_Init+0x138>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e59      	subs	r1, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fbb1 f3f3 	udiv	r3, r1, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236e:	e051      	b.n	8002414 <HAL_I2C_Init+0x1dc>
 8002370:	2304      	movs	r3, #4
 8002372:	e04f      	b.n	8002414 <HAL_I2C_Init+0x1dc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <HAL_I2C_Init+0x168>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e58      	subs	r0, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e012      	b.n	80023c6 <HAL_I2C_Init+0x18e>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	0099      	lsls	r1, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Init+0x196>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e022      	b.n	8002414 <HAL_I2C_Init+0x1dc>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10e      	bne.n	80023f4 <HAL_I2C_Init+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e58      	subs	r0, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Init+0x1dc>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	0099      	lsls	r1, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	6809      	ldr	r1, [r1, #0]
 8002418:	4313      	orrs	r3, r2
 800241a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6911      	ldr	r1, [r2, #16]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68d2      	ldr	r2, [r2, #12]
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	430b      	orrs	r3, r1
 8002456:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	000186a0 	.word	0x000186a0
 80024b0:	001e847f 	.word	0x001e847f
 80024b4:	003d08ff 	.word	0x003d08ff
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	817b      	strh	r3, [r7, #10]
 80024d0:	4613      	mov	r3, r2
 80024d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff f848 	bl	8001568 <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	f040 80e0 	bne.w	80026a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2319      	movs	r3, #25
 80024ee:	2201      	movs	r2, #1
 80024f0:	4970      	ldr	r1, [pc, #448]	@ (80026b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f964 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	e0d3      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x50>
 800250c:	2302      	movs	r3, #2
 800250e:	e0cc      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d007      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	@ 0x21
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2210      	movs	r2, #16
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a50      	ldr	r2, [pc, #320]	@ (80026b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f89c 	bl	80026bc <I2C_MasterRequestWrite>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08d      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025a4:	e066      	b.n	8002674 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa22 	bl	80029f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11b      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x188>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa19 	bl	8002a84 <I2C_WaitOnBTFFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e01a      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d194      	bne.n	80025a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d107      	bne.n	8002710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f84f 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002736:	d103      	bne.n	8002740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e035      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800274c:	d108      	bne.n	8002760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e01b      	b.n	8002798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	11db      	asrs	r3, r3, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0306 	and.w	r3, r3, #6
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f063 030f 	orn	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	490e      	ldr	r1, [pc, #56]	@ (80027b8 <I2C_MasterRequestWrite+0xfc>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f898 	bl	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e010      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4907      	ldr	r1, [pc, #28]	@ (80027bc <I2C_MasterRequestWrite+0x100>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f888 	bl	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	00010008 	.word	0x00010008
 80027bc:	00010002 	.word	0x00010002

080027c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d0:	e048      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d044      	beq.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fec5 	bl	8001568 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d139      	bne.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10d      	bne.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	e00c      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	43da      	mvns	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	429a      	cmp	r2, r3
 8002834:	d116      	bne.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e023      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10d      	bne.n	800288a <I2C_WaitOnFlagUntilTimeout+0xca>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	e00c      	b.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d093      	beq.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c2:	e071      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d2:	d123      	bne.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f043 0204 	orr.w	r2, r3, #4
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e067      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d041      	beq.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7fe fe20 	bl	8001568 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d136      	bne.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10c      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	e00b      	b.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e021      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10c      	bne.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e00b      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af6d 	bne.w	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a00:	e034      	b.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f886 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e034      	b.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d028      	beq.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fda5 	bl	8001568 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11d      	bne.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3a:	2b80      	cmp	r3, #128	@ 0x80
 8002a3c:	d016      	beq.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	d1c3      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a90:	e034      	b.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f83e 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e034      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d028      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe fd5d 	bl	8001568 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11d      	bne.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d016      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d1c3      	bne.n	8002a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d11b      	bne.n	8002b64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e128      	b.n	8002dd8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a90      	ldr	r2, [pc, #576]	@ (8002de0 <HAL_I2S_Init+0x26c>)
 8002b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fb49 	bl	8001238 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d060      	beq.n	8002c94 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002bda:	2310      	movs	r3, #16
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e001      	b.n	8002be4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d802      	bhi.n	8002bf2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f001 fa86 	bl	8004104 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bf8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c02:	d125      	bne.n	8002c50 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	3305      	adds	r3, #5
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e01f      	b.n	8002c6e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	3305      	adds	r3, #5
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e00e      	b.n	8002c6e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	3305      	adds	r3, #5
 8002c6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4a5c      	ldr	r2, [pc, #368]	@ (8002de4 <HAL_I2S_Init+0x270>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e003      	b.n	8002c9c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d902      	bls.n	8002ca8 <HAL_I2S_Init+0x134>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2bff      	cmp	r3, #255	@ 0xff
 8002ca6:	d907      	bls.n	8002cb8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e08f      	b.n	8002dd8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	ea42 0103 	orr.w	r1, r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002cd6:	f023 030f 	bic.w	r3, r3, #15
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6851      	ldr	r1, [r2, #4]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68d2      	ldr	r2, [r2, #12]
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6992      	ldr	r2, [r2, #24]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cfa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d161      	bne.n	8002dc8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_I2S_Init+0x274>)
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a37      	ldr	r2, [pc, #220]	@ (8002dec <HAL_I2S_Init+0x278>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_I2S_Init+0x1a4>
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_I2S_Init+0x27c>)
 8002d16:	e001      	b.n	8002d1c <HAL_I2S_Init+0x1a8>
 8002d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	4932      	ldr	r1, [pc, #200]	@ (8002dec <HAL_I2S_Init+0x278>)
 8002d24:	428a      	cmp	r2, r1
 8002d26:	d101      	bne.n	8002d2c <HAL_I2S_Init+0x1b8>
 8002d28:	4a31      	ldr	r2, [pc, #196]	@ (8002df0 <HAL_I2S_Init+0x27c>)
 8002d2a:	e001      	b.n	8002d30 <HAL_I2S_Init+0x1bc>
 8002d2c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002d30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002d34:	f023 030f 	bic.w	r3, r3, #15
 8002d38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dec <HAL_I2S_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_I2S_Init+0x1d4>
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <HAL_I2S_Init+0x27c>)
 8002d46:	e001      	b.n	8002d4c <HAL_I2S_Init+0x1d8>
 8002d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a25      	ldr	r2, [pc, #148]	@ (8002dec <HAL_I2S_Init+0x278>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_I2S_Init+0x1ea>
 8002d5a:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_I2S_Init+0x27c>)
 8002d5c:	e001      	b.n	8002d62 <HAL_I2S_Init+0x1ee>
 8002d5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d6e:	d003      	beq.n	8002d78 <HAL_I2S_Init+0x204>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e001      	b.n	8002d84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002da2:	4313      	orrs	r3, r2
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002db0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <HAL_I2S_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2S_Init+0x24c>
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_I2S_Init+0x27c>)
 8002dbe:	e001      	b.n	8002dc4 <HAL_I2S_Init+0x250>
 8002dc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dc4:	897a      	ldrh	r2, [r7, #10]
 8002dc6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	080030f1 	.word	0x080030f1
 8002de4:	cccccccd 	.word	0xcccccccd
 8002de8:	08003205 	.word	0x08003205
 8002dec:	40003800 	.word	0x40003800
 8002df0:	40003400 	.word	0x40003400

08002df4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_I2S_Transmit_DMA+0x1a>
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e08a      	b.n	8002f28 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e082      	b.n	8002f28 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2S_Transmit_DMA+0x3e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e07a      	b.n	8002f28 <HAL_I2S_Transmit_DMA+0x134>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2S_Transmit_DMA+0x72>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d10a      	bne.n	8002e7c <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e7a:	e005      	b.n	8002e88 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_I2S_Transmit_DMA+0x13c>)
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <HAL_I2S_Transmit_DMA+0x140>)
 8002e96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <HAL_I2S_Transmit_DMA+0x144>)
 8002e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ea8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002eb0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002eb8:	f7fe fd46 	bl	8001948 <HAL_DMA_Start_IT>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e022      	b.n	8002f28 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0202 	orr.w	r2, r2, #2
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f24:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	08002fcf 	.word	0x08002fcf
 8002f34:	08002f8d 	.word	0x08002f8d
 8002f38:	08002feb 	.word	0x08002feb

08002f3c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0202 	bic.w	r2, r2, #2
 8002fb0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ffc5 	bl	8002f50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7ff ffad 	bl	8002f3c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0203 	bic.w	r2, r2, #3
 8003006:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	f043 0208 	orr.w	r2, r3, #8
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff ffa5 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1c9a      	adds	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10e      	bne.n	800308a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800307a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff63 	bl	8002f50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	b292      	uxth	r2, r2
 80030a6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff3e 	bl	8002f64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b04      	cmp	r3, #4
 800310a:	d13a      	bne.n	8003182 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d109      	bne.n	800312a <I2S_IRQHandler+0x3a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	d102      	bne.n	800312a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ffb4 	bl	8003092 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	d126      	bne.n	8003182 <I2S_IRQHandler+0x92>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b20      	cmp	r3, #32
 8003140:	d11f      	bne.n	8003182 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003150:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	f043 0202 	orr.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fefb 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b03      	cmp	r3, #3
 800318c:	d136      	bne.n	80031fc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d109      	bne.n	80031ac <I2S_IRQHandler+0xbc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	2b80      	cmp	r3, #128	@ 0x80
 80031a4:	d102      	bne.n	80031ac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff45 	bl	8003036 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d122      	bne.n	80031fc <I2S_IRQHandler+0x10c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d11b      	bne.n	80031fc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff febe 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a92      	ldr	r2, [pc, #584]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800321e:	4b92      	ldr	r3, [pc, #584]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003220:	e001      	b.n	8003226 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003222:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a8b      	ldr	r2, [pc, #556]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800323c:	4b8a      	ldr	r3, [pc, #552]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800323e:	e001      	b.n	8003244 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003250:	d004      	beq.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 8099 	bne.w	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f925 	bl	80034c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9c8 	bl	8003620 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b40      	cmp	r3, #64	@ 0x40
 8003298:	d13a      	bne.n	8003310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d035      	beq.n	8003310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80032ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032b0:	e001      	b.n	80032b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80032b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4969      	ldr	r1, [pc, #420]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032be:	428b      	cmp	r3, r1
 80032c0:	d101      	bne.n	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80032c2:	4b69      	ldr	r3, [pc, #420]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032c4:	e001      	b.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80032c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fe34 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	f040 80c3 	bne.w	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80bd 	beq.w	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003336:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a49      	ldr	r2, [pc, #292]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003342:	4b49      	ldr	r3, [pc, #292]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003344:	e001      	b.n	800334a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003346:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4944      	ldr	r1, [pc, #272]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003352:	428b      	cmp	r3, r1
 8003354:	d101      	bne.n	800335a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003356:	4b44      	ldr	r3, [pc, #272]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003358:	e001      	b.n	800335e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800335a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800335e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003362:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f043 0204 	orr.w	r2, r3, #4
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fdf6 	bl	8002f78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800338c:	e089      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8be 	bl	8003524 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8fd 	bl	80035bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d12f      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02a      	beq.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4919      	ldr	r1, [pc, #100]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003400:	428b      	cmp	r3, r1
 8003402:	d101      	bne.n	8003408 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003404:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003406:	e001      	b.n	800340c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003408:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800340c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003410:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fda6 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d136      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d031      	beq.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800344a:	4b07      	ldr	r3, [pc, #28]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800344c:	e001      	b.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800344e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4902      	ldr	r1, [pc, #8]	@ (8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800345a:	428b      	cmp	r3, r1
 800345c:	d106      	bne.n	800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800345e:	4b02      	ldr	r3, [pc, #8]	@ (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003460:	e006      	b.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003462:	bf00      	nop
 8003464:	40003800 	.word	0x40003800
 8003468:	40003400 	.word	0x40003400
 800346c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003470:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003474:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003484:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd6c 	bl	8002f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034a0:	e000      	b.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034a2:	bf00      	nop
}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	1c99      	adds	r1, r3, #2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003500:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ffc9 	bl	80034ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	1c99      	adds	r1, r3, #2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6251      	str	r1, [r2, #36]	@ 0x24
 8003536:	8819      	ldrh	r1, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <I2SEx_TxISR_I2SExt+0x90>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <I2SEx_TxISR_I2SExt+0x22>
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003544:	e001      	b.n	800354a <I2SEx_TxISR_I2SExt+0x26>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800354a:	460a      	mov	r2, r1
 800354c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d121      	bne.n	80035aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a12      	ldr	r2, [pc, #72]	@ (80035b4 <I2SEx_TxISR_I2SExt+0x90>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <I2SEx_TxISR_I2SExt+0x50>
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003572:	e001      	b.n	8003578 <I2SEx_TxISR_I2SExt+0x54>
 8003574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	490d      	ldr	r1, [pc, #52]	@ (80035b4 <I2SEx_TxISR_I2SExt+0x90>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d101      	bne.n	8003588 <I2SEx_TxISR_I2SExt+0x64>
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003586:	e001      	b.n	800358c <I2SEx_TxISR_I2SExt+0x68>
 8003588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800358c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003590:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff81 	bl	80034ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40003800 	.word	0x40003800
 80035b8:	40003400 	.word	0x40003400

080035bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68d8      	ldr	r0, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	1c99      	adds	r1, r3, #2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80035d4:	b282      	uxth	r2, r0
 80035d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d113      	bne.n	8003618 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff4a 	bl	80034ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a20      	ldr	r2, [pc, #128]	@ (80036b0 <I2SEx_RxISR_I2SExt+0x90>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <I2SEx_RxISR_I2SExt+0x16>
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003634:	e001      	b.n	800363a <I2SEx_RxISR_I2SExt+0x1a>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800363a:	68d8      	ldr	r0, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	1c99      	adds	r1, r3, #2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003646:	b282      	uxth	r2, r0
 8003648:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d121      	bne.n	80036a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <I2SEx_RxISR_I2SExt+0x90>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <I2SEx_RxISR_I2SExt+0x50>
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <I2SEx_RxISR_I2SExt+0x94>)
 800366e:	e001      	b.n	8003674 <I2SEx_RxISR_I2SExt+0x54>
 8003670:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	490d      	ldr	r1, [pc, #52]	@ (80036b0 <I2SEx_RxISR_I2SExt+0x90>)
 800367c:	428b      	cmp	r3, r1
 800367e:	d101      	bne.n	8003684 <I2SEx_RxISR_I2SExt+0x64>
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003682:	e001      	b.n	8003688 <I2SEx_RxISR_I2SExt+0x68>
 8003684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003688:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800368c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff03 	bl	80034ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40003800 	.word	0x40003800
 80036b4:	40003400 	.word	0x40003400

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e267      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d075      	beq.n	80037c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036d6:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00c      	beq.n	80036fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4b85      	ldr	r3, [pc, #532]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d112      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b82      	ldr	r3, [pc, #520]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fa:	d10b      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	4b7e      	ldr	r3, [pc, #504]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05b      	beq.n	80037c0 <HAL_RCC_OscConfig+0x108>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d157      	bne.n	80037c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e242      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371c:	d106      	bne.n	800372c <HAL_RCC_OscConfig+0x74>
 800371e:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a75      	ldr	r2, [pc, #468]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b70      	ldr	r3, [pc, #448]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6f      	ldr	r2, [pc, #444]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b6d      	ldr	r3, [pc, #436]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6c      	ldr	r2, [pc, #432]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 8003750:	4b69      	ldr	r3, [pc, #420]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a68      	ldr	r2, [pc, #416]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fd fefa 	bl	8001568 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fd fef6 	bl	8001568 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	@ 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e207      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b5b      	ldr	r3, [pc, #364]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xc0>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fd fee6 	bl	8001568 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fd fee2 	bl	8001568 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1f3      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b51      	ldr	r3, [pc, #324]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0xe8>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b47      	ldr	r3, [pc, #284]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b44      	ldr	r3, [pc, #272]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b41      	ldr	r3, [pc, #260]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c7      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4937      	ldr	r1, [pc, #220]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCC_OscConfig+0x244>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fe9b 	bl	8001568 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd fe97 	bl	8001568 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1a8      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b28      	ldr	r3, [pc, #160]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4925      	ldr	r1, [pc, #148]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCC_OscConfig+0x244>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fe7a 	bl	8001568 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd fe76 	bl	8001568 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e187      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d036      	beq.n	8003910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_RCC_OscConfig+0x248>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fe5a 	bl	8001568 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd fe56 	bl	8001568 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e167      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x200>
 80038d6:	e01b      	b.n	8003910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <HAL_RCC_OscConfig+0x248>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038de:	f7fd fe43 	bl	8001568 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e00e      	b.n	8003904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fd fe3f 	bl	8001568 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d907      	bls.n	8003904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e150      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	42470000 	.word	0x42470000
 8003900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b88      	ldr	r3, [pc, #544]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ea      	bne.n	80038e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8097 	beq.w	8003a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b81      	ldr	r3, [pc, #516]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b7d      	ldr	r3, [pc, #500]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	4a7c      	ldr	r2, [pc, #496]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	@ 0x40
 800393e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b77      	ldr	r3, [pc, #476]	@ (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b74      	ldr	r3, [pc, #464]	@ (8003b2c <HAL_RCC_OscConfig+0x474>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a73      	ldr	r2, [pc, #460]	@ (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fd fdff 	bl	8001568 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fd fdfb 	bl	8001568 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e10c      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b6a      	ldr	r3, [pc, #424]	@ (8003b2c <HAL_RCC_OscConfig+0x474>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2ea>
 8003994:	4b64      	ldr	r3, [pc, #400]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a63      	ldr	r2, [pc, #396]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a0:	e01c      	b.n	80039dc <HAL_RCC_OscConfig+0x324>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x30c>
 80039aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x324>
 80039c4:	4b58      	ldr	r3, [pc, #352]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	4a57      	ldr	r2, [pc, #348]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d0:	4b55      	ldr	r3, [pc, #340]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d4:	4a54      	ldr	r2, [pc, #336]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd fdc0 	bl	8001568 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd fdbc 	bl	8001568 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0cb      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	4b49      	ldr	r3, [pc, #292]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ee      	beq.n	80039ec <HAL_RCC_OscConfig+0x334>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7fd fdaa 	bl	8001568 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fd fda6 	bl	8001568 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0b5      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ee      	bne.n	8003a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b39      	ldr	r3, [pc, #228]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	4a38      	ldr	r2, [pc, #224]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a1 	beq.w	8003b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a56:	4b34      	ldr	r3, [pc, #208]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d05c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d141      	bne.n	8003aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fd fd7a 	bl	8001568 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fd76 	bl	8001568 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e087      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	491b      	ldr	r1, [pc, #108]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fd4f 	bl	8001568 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fd fd4b 	bl	8001568 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e05c      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x416>
 8003aec:	e054      	b.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b10      	ldr	r3, [pc, #64]	@ (8003b30 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fd38 	bl	8001568 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fd34 	bl	8001568 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e045      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x444>
 8003b1a:	e03d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e038      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x4ec>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d028      	beq.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d121      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d11a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0cc      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d90c      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b65      	ldr	r3, [pc, #404]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b63      	ldr	r3, [pc, #396]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b8      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfc:	4b59      	ldr	r3, [pc, #356]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a58      	ldr	r2, [pc, #352]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c14:	4b53      	ldr	r3, [pc, #332]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a52      	ldr	r2, [pc, #328]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	494d      	ldr	r1, [pc, #308]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d044      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d119      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c66:	4b3f      	ldr	r3, [pc, #252]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e067      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c86:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f023 0203 	bic.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4934      	ldr	r1, [pc, #208]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c98:	f7fd fc66 	bl	8001568 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fd fc62 	bl	8001568 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e04f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 020c 	and.w	r2, r3, #12
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d1eb      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b25      	ldr	r3, [pc, #148]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d20c      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e032      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4916      	ldr	r1, [pc, #88]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1a:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	490e      	ldr	r1, [pc, #56]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d2e:	f000 f821 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	490a      	ldr	r1, [pc, #40]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fbc6 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023c00 	.word	0x40023c00
 8003d64:	40023800 	.word	0x40023800
 8003d68:	08004234 	.word	0x08004234
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	20000004 	.word	0x20000004

08003d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d78:	b090      	sub	sp, #64	@ 0x40
 8003d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d8c:	4b59      	ldr	r3, [pc, #356]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d00d      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x40>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	f200 80a1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x34>
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x3a>
 8003da6:	e09b      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dac:	e09b      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dae:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db2:	e098      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003de0:	fb03 f201 	mul.w	r2, r3, r1
 8003de4:	2300      	movs	r3, #0
 8003de6:	fb00 f303 	mul.w	r3, r0, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	4a43      	ldr	r2, [pc, #268]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x188>)
 8003dee:	fba0 1202 	umull	r1, r2, r0, r2
 8003df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df4:	460a      	mov	r2, r1
 8003df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfa:	4413      	add	r3, r2
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	2200      	movs	r2, #0
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	61fa      	str	r2, [r7, #28]
 8003e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e0e:	f7fc f9db 	bl	80001c8 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4613      	mov	r3, r2
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1a:	e053      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	2200      	movs	r2, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	617a      	str	r2, [r7, #20]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e2e:	f04f 0b00 	mov.w	fp, #0
 8003e32:	4652      	mov	r2, sl
 8003e34:	465b      	mov	r3, fp
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e66:	ebb2 0408 	subs.w	r4, r2, r8
 8003e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	00eb      	lsls	r3, r5, #3
 8003e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7c:	00e2      	lsls	r2, r4, #3
 8003e7e:	4614      	mov	r4, r2
 8003e80:	461d      	mov	r5, r3
 8003e82:	eb14 030a 	adds.w	r3, r4, sl
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	eb45 030b 	adc.w	r3, r5, fp
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	60fa      	str	r2, [r7, #12]
 8003eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb8:	f7fc f986 	bl	80001c8 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3740      	adds	r7, #64	@ 0x40
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	017d7840 	.word	0x017d7840

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000000 	.word	0x20000000

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	08004244 	.word	0x08004244

08003f40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d035      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f68:	4b62      	ldr	r3, [pc, #392]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6e:	f7fd fafb 	bl	8001568 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f76:	f7fd faf7 	bl	8001568 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0b0      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f88:	4b5b      	ldr	r3, [pc, #364]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	019a      	lsls	r2, r3, #6
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	071b      	lsls	r3, r3, #28
 8003fa0:	4955      	ldr	r1, [pc, #340]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fa8:	4b52      	ldr	r3, [pc, #328]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fae:	f7fd fadb 	bl	8001568 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fb6:	f7fd fad7 	bl	8001568 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e090      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8083 	beq.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b44      	ldr	r3, [pc, #272]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	4a43      	ldr	r2, [pc, #268]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ff2:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3e      	ldr	r2, [pc, #248]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004008:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800400a:	f7fd faad 	bl	8001568 <HAL_GetTick>
 800400e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7fd faa9 	bl	8001568 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e062      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004024:	4b35      	ldr	r3, [pc, #212]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004030:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004038:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d028      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404e:	4b2a      	ldr	r3, [pc, #168]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004056:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004058:	4b29      	ldr	r3, [pc, #164]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405e:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004064:	4a24      	ldr	r2, [pc, #144]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800406a:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d114      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004076:	f7fd fa77 	bl	8001568 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fd fa73 	bl	8001568 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e02a      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ac:	d10d      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80040ae:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c2:	490d      	ldr	r1, [pc, #52]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]
 80040c8:	e005      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040ca:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040d4:	6093      	str	r3, [r2, #8]
 80040d6:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	4905      	ldr	r1, [pc, #20]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	42470068 	.word	0x42470068
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
 8004100:	42470e40 	.word	0x42470e40

08004104 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d13f      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004138:	d12f      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800413a:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800413c:	617b      	str	r3, [r7, #20]
          break;
 800413e:	e02f      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004140:	4b1c      	ldr	r3, [pc, #112]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414c:	d108      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004156:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	e007      	b.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004168:	4a15      	ldr	r2, [pc, #84]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004170:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418a:	0f1b      	lsrs	r3, r3, #28
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
          break;
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
          break;
 800419e:	bf00      	nop
        }
      }
      break;
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80041a2:	bf00      	nop
    }
  }
  return frequency;
 80041a4:	697b      	ldr	r3, [r7, #20]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00bb8000 	.word	0x00bb8000
 80041bc:	017d7840 	.word	0x017d7840
 80041c0:	00f42400 	.word	0x00f42400

080041c4 <memset>:
 80041c4:	4402      	add	r2, r0
 80041c6:	4603      	mov	r3, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4d0d      	ldr	r5, [pc, #52]	@ (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004210 <__libc_init_array+0x3c>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2600      	movs	r6, #0
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004218 <__libc_init_array+0x44>)
 80041e8:	f000 f818 	bl	800421c <_init>
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2600      	movs	r6, #0
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f855 3b04 	ldr.w	r3, [r5], #4
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	0800425c 	.word	0x0800425c
 8004210:	0800425c 	.word	0x0800425c
 8004214:	0800425c 	.word	0x0800425c
 8004218:	08004260 	.word	0x08004260

0800421c <_init>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	bf00      	nop
 8004220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004222:	bc08      	pop	{r3}
 8004224:	469e      	mov	lr, r3
 8004226:	4770      	bx	lr

08004228 <_fini>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	bf00      	nop
 800422c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422e:	bc08      	pop	{r3}
 8004230:	469e      	mov	lr, r3
 8004232:	4770      	bx	lr
